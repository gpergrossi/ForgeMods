package dev.mortus.cells;

import java.awt.Point;
import java.awt.geom.Point2D;
import java.util.Map;
import java.util.Random;

public class InfiniteVoronoi {

	private static final long MAX_INTEGER = (long) Integer.MAX_VALUE;
	
	long globalSeed;
	double gridSize;
	
	int chunkCacheCapacity;
	Map<Point, Cell> chunkCache;
	
	public InfiniteVoronoi(double gridSize, long seed, int chunkCacheCapacity) {
		this.gridSize = gridSize;
		this.globalSeed = seed;
		
		if (chunkCacheCapacity < 9) chunkCacheCapacity = 9; // should at least be 9 or it saves NO effort
		this.chunkCache = new LRUHashMap<>(chunkCacheCapacity);
		this.chunkCacheCapacity = chunkCacheCapacity;
	}
	
	public Cell getCell(double x, double y) {
		int chunkX = (int) Math.floor(x / gridSize);
		int chunkY = (int) Math.floor(y / gridSize);
		Point chunkKey = new Point(chunkX, chunkY);
		
		Cell site = getCell(chunkKey, true);
		return site.getClosestSite(x, y);
	}
	
	private Cell getCell(Point chunkKey, boolean init) {
		Cell info = chunkCache.get(chunkKey);
		if (info == null) {
			info = new Cell(this, chunkKey);
			chunkCache.put(chunkKey, info);
		}
		if (init) info.init();
		
		return info;
	}
	
}
